#!/bin/bash
#------------------------------------------------------------------------------                                                                                                                                                      
#  dtOO < design tool Object-Oriented >                                         
#                                                                               
#    Copyright (C) 2024 A. Tismer.                                              
#------------------------------------------------------------------------------ 
#License                                                                        
#    This file is part of dtOO.                                                 
#                                                                               
#    dtOO is distributed in the hope that it will be useful, but WITHOUT        
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      
#    FITNESS FOR A PARTICULAR PURPOSE.  See the LICENSE.txt file in the         
#    dtOO root directory for more details.                                      
#                                                                               
#    You should have received a copy of the License along with dtOO.            
#                                                                               
#------------------------------------------------------------------------------ 

log_base() { 
  echo -e `date +"%d-%m-%Y %H:%M:%S"` " - " "${@}"
}

info() { 
  log_base "[I] - ${@}"
}

dbg() {
  [[ ${_debug:-false} == "true" ]] && log_base "[D] - \e[90m${@}\e[0m"
}

warn() {
  log_base "[W] - \e[33m${@}\e[0m"
}

error() {
  log_base "[E] - \e[31m${@}\e[0m" >&2
  exit 1
}

output() {
  echo -e "${@}"
}

output_exit_on_error () {
  if [ $# -eq 0 ]; then
    error "Usage: This wrapper function takes any function with args and"\
          "logs output to <func_name_log.txt>"
  fi

  local _log_file="$1"
  local _fun_call="$2"
  shift 2

  info "Execute: $_fun_call $@"
  if [[ "$_tee" == "false" ]]; then
    $_fun_call $@ >> $_log_file 2>&1 \
      || error "  !\n  !\n  ! Failed: Please check ${_log_file}\n  !\n  !"
    dbg "\n\n[ ... ]\n\n$(tail ${_log_file})"
  else
    $_fun_call $@ | tee $_log_file 2>&1 \
      || error "  !\n  !\n  ! Failed: Please check ${_log_file}\n  !\n  !"
  fi
}

git_cmake_build() {
  local _name=$1
  local _cloneCommand=$2
  local _checkoutCommand=$3
  local _cmakeConf=$4
  local _addGitCommand="${5}"

  [[ "$_listDep" == 1 ]] && output "$_name -> ${_name}@<CMAKE-OPTION>" && return
  
  info "Process $_name ..."
  if [[ "$_dep" == "$_name" || "$_dep" == "all" ]]; then
    info "( L ) _name            : $_name"
    info "( G ) _dep             : $_dep"
    info "( G ) _skipBuild       : $_skipBuild"
    info "( G ) _skipDownload    : $_skipDownload"
    info "( G ) _extraCmake      : ${_extraCmake[$_name]}"
    info "( L ) _checkoutCommand : $_checkoutCommand"
    info "( L ) _cmakeConf       : $_cmakeConf"
    info "( L ) _addGitCommand   : $_addGitCommand"
  
   
    if [[ "$_testRun" == 0 ]]; then
      # create log file
      local _logFile=${_pwd}/${_name}.log
      echo -e "#\n# Output for ${_name} \n#\n\n" > ${_logFile} 2>&1
      
      cd $_pwd
      
      if [[ "$_skipDownload" == "0" ]]; then
        rm -rf ${_pwd}/${_name}
        output_exit_on_error ${_logFile} \
          git clone $_cloneCommand $_name
        if [ ! -z "$_checkoutCommand" ]; then
          cd ${_pwd}/${_name}
          output_exit_on_error $_logFile \
            git checkout $_checkoutCommand
          if [ -f "${_patch}/${_name}.${_checkoutCommand}" ]; then
            output_exit_on_error ${_logFile} \
              git apply ${_patch}/${_name}.${_checkoutCommand} 
          fi
          if [ ! -z "$_addGitCommand" ]; then
            output_exit_on_error ${_logFile} \
              $_addGitCommand 
          fi
        fi
      fi
      mkdir -p ${_pwd}/build_$_name
      if [[ "$_skipBuild" == "0" ]]; then
        rm -rf ${_pwd}/build_$_name/*
        cd ${_pwd}/build_$_name
        output_exit_on_error ${_logFile} \
          cmake \
            ${_cmakeConf} \
            ${_extraCmake[$_name]} \
            ../${_name}
        output_exit_on_error ${_logFile} \
          make -j${_nProcs}
      fi
      cd ${_pwd}/build_$_name
      output_exit_on_error ${_logFile} \
        make -j${_nProcs} install 
    else
      info "  ->"
      info "  -> Test run"
      info "  ->"
    fi   
  else
    info "  ...skip"
  fi
}

curl_configure_build() {
  local _name=$1
  local _curlCommand=$2
  local _configureConf=$3

  [[ "$_listDep" == 1 ]] && output "$_name" && return

  info "Process $_name ..."
  if [[ "$_dep" == "$_name" || "$_dep" == "all" ]]; then
    info "( L ) _name            : $_name"
    info "( G ) _dep             : $_dep"
    info "( G ) _skipBuild       : $_skipBuild"
    info "( G ) _skipDownload    : $_skipDownload"
    info "( L ) _curlCommand     : $_curlCommand"
    info "( L ) _configureConf   : $_configureConf"
   
    if [[ "$_testRun" == 0 ]]; then
      # create log file
      local _logFile=${_pwd}/${_name}.log
      echo -e "#\n# Output for ${_name} \n#\n\n" > ${_logFile} 2>&1
      
      cd $_pwd 

      if [[ "$_skipDownload" == "0" ]]; then
        rm -rf ${_pwd}/${_name}
        rm -rf ${_pwd}/${_name}.tar.xz
        output_exit_on_error ${_logFile} \
          curl \
            -O \
            ${_curlCommand}

        if [ -f "${_name}.tar.xz" ]; then
          output_exit_on_error ${_logFile} \
            tar xvf ${_name}.tar.xz 
        fi
      fi
      if [[ "$_skipBuild" == "0" ]]; then
        cd ${_pwd}/${_name}
        output_exit_on_error ${_logFile} \
          ./configure \
            ${_configureConf} 
      fi
      cd ${_pwd}/${_name}
      output_exit_on_error ${_logFile} \
        make -j${_nProcs} install 
    else
      info "  ->"
      info "  -> Test run"
      info "  ->"
    fi
  else
    info "  ...skip"
  fi
}

check_bash_version() {
  local a=4 b=0   # Bash version >= a.b

  (( BASH_VERSINFO[0] > a || \
    (BASH_VERSINFO[0] == a && BASH_VERSINFO[1] >= b) )) || {
      error "Error: Bash version >= $a.$b expected."
  }
}
check_bash_version

usage() { 
  output "Usage: $0 [OPTION]\n" && grep "^ \+##" $0 | sed -e "s/^.*.##//g"
  exit 0
}

# init variables
_skipBuild=0
_skipDownload=0
_testRun=0
_listDep=0
_debug=false
declare -A _extraCmake
_tee=false

# no input given 
[ $# -eq 0 ] && usage

#
# parse options
#
args=$(\
  getopt \
    -a \
    -o \
    hbdtli:n:o: \
    --long \
      help,skipBuild,skipDownload,testRun,listDep \
    --long \
      installPrefix:,nProcs:,dep:,extra-cmake: \
    --long \
      debug,tee \
    -- "$@"\
)
[ $? -gt 0 ] && error "Return status of getopt $?"

eval set -- ${args}
while :
do
  case $1 in
    -h | --help) usage ; shift ;;
      ##  -h, --help
      ##    Show this help.
    -b | --skipBuild) _skipBuild=1 ; shift ;;
      ##  -b --skipBuild
      ##    Skip cmake build step.
    -d | --skipDownload) _skipDownload=1 ; shift ;;
      ##  -d, --skipDownload
      ##    Skip download step.
    -t | --testRun) _testRun=1 ; shift ;;
      ##  -t, --testRun
      ##    Perform only test run; nothing will be compiled.
    -l | --listDep) _listDep=1 ; shift ;;
      ##  -l, --listDep
      ##    List dependencies.
    -i | --installPrefix) _installPrefix=$2 ; shift 2 ;;
      ##  -i input, --installPrefix input
      ##    Define prefix of installation directory.
    -n | --nProcs) _nProcs=$2 ; shift 2 ;;
      ##  -n input, --nProcs input
      ##    Define number of processors used for compiling.
    -o | --dep) _dep=$2 ; shift 2 ;;
      ##  -o input, --dep input
      ##    Define which dependency to build.
    --extra-cmake) \
      __key=`echo $2 | sed 's/@.*$//g'` \
      && \
      __val=`echo $2 | sed 's/^.*@//g'` \
      ; \
      shift 2 \
      ; \
      _extraCmake[${__key}]=${__val} ;;
      ##  --extra-cmake input
      ##    Define additional cmake configure string. You can give multiple
      ##    --extra-cmake options. The "@" sign is used as delimiter. A call to
      ##    this script by
      ##      
      ##      > sh buildDep \
      ##      > -o all \
      ##      > ...
      ##      > --extra-cmake=occt@-DPython_EXECUTABLE=/usr/bin/python3.7 \
      ##      > --extra-cmake=pythonocc-core@-DPython_EXECUTABLE=/usr/bin/python3.11
      ##    
      ##    sets an extra make option for occt and pythonocc-core.
    --debug) _debug=true 
      warn "If you would like to debug as much as possible, then the debug option has to be the first one."
      shift
      ;;
      ##  --debug
      ##    Debug output.
     --tee) _tee=true
      shift
      ;;
      ##  --tee
      ##    Output of commands during build is shown on stdout.
     
    --) shift; break ;; # end of arguments
    *) error "Unsupported option: $1" ;;
  esac
done

# output options
dbg "Option _skipBuild=${_skipBuild}"
dbg "Option _skipDownload=${_skipDownload}"
dbg "Option _testRun=${_testRun}"
dbg "Option _listDep=${_listDep}"
dbg "Option _installPrefix=${_installPrefix}"
dbg "Option _nProcs=${_nProcs}"
dbg "Option _dep=${_dep}"
for i in "${!_extraCmake[@]}"; do
  dbg "Option _extraCmake[${i}]=${_extraCmake[$i]}"
done
dbg "Option _debug=${_debug}"

# check for unused parameters
[[ ! -z "$@" ]] && error "Unknown parameter values: $@"

# create and change to ThirdParty directory
mkdir -p ThirdParty
cd ThirdParty

# store working directory
_pwd=`pwd`

# store ThirdParty.patch directory
_patch=${_pwd}/ThirdParty.patch

#-------------------------------------------------------------------------------
# cgns
#-------------------------------------------------------------------------------
git_cmake_build \
  "cgns" \
  "https://github.com/CGNS/CGNS" \
  "" \
  "\
  -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
  -DCGNS_USE_SHARED=ON \
  -DCGNS_ENABLE_SCOPING=OFF \
  -DCGNS_ENABLE_HDF5=OFF \
  -DCGNS_ENABLE_64BIT=ON \
  "
#-------------------------------------------------------------------------------
# lapack
#-------------------------------------------------------------------------------
git_cmake_build \
  "lapack" \
  "https://github.com/Reference-LAPACK/lapack" \
  "v3.11.0" \
  "\
  -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
  -DCBLAS=ON \
  -DBUILD_SHARED_LIBS=ON\
  "

#-------------------------------------------------------------------------------
# mpfr
#-------------------------------------------------------------------------------
curl_configure_build \
  "mpfr-4.1.0" \
  "https://toolchains.bootlin.com/downloads/releases/sources/mpfr-4.1.0/mpfr-4.1.0.tar.xz" \
  "--prefix=${_installPrefix}"

#-------------------------------------------------------------------------------
# OpenMesh
#-------------------------------------------------------------------------------
git_cmake_build \
  "openmesh" \
  "https://gitlab.vci.rwth-aachen.de:9000/OpenMesh/OpenMesh.git" \
  "OpenMesh-8.1" \
  "-DCMAKE_INSTALL_PREFIX=${_installPrefix}"
  
#-------------------------------------------------------------------------------
# OpenVolumeMesh
#-------------------------------------------------------------------------------
git_cmake_build \
  "openvolumemesh" \
  "https://github.com/nTopology/OpenVolumeMesh.git" \
  "" \
  "\
  -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
  -DCMAKE_BUILD_TYPE=Release \
  "
  
#-------------------------------------------------------------------------------
# occt
#-------------------------------------------------------------------------------
git_cmake_build \
  "occt" \
  "https://git.dev.opencascade.org/repos/occt.git" \
  "V7_8_1" \
  "\
    -DINSTALL_DIR=${_installPrefix} \
    -DBUILD_RELEASE_DISABLE_EXCEPTIONS=FALSE \
  "
  
#-------------------------------------------------------------------------------
# pythonocc-core
#-------------------------------------------------------------------------------
git_cmake_build \
  "pythonocc-core" \
  "https://github.com/tpaviot/pythonocc-core.git" \
  "7.8.1" \
  "\
    -DOCCT_INCLUDE_DIR=${_installPrefix}/include/opencascade \
    -DOCCT_LIBRARY_DIR=${_installPrefix}/lib \
    -DPYTHONOCC_INSTALL_DIRECTORY=${_installPrefix}/tools/OCC \
  "

#-------------------------------------------------------------------------------
# gmsh
#-------------------------------------------------------------------------------
export CASROOT=${_installPrefix}
git_cmake_build \
  "gmsh" \
  "https://github.com/live-clones/gmsh.git" \
  "gmsh_4_13_1" \
  "\
  -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
  -DENABLE_BUILD_SHARED=ON \
  -DENABLE_PRIVATE_API=ON \
  -DENABLE_SOLVER=OFF \
  -DENABLE_GETDP=OFF \
  -DENABLE_GMM=OFF \
  -DENABLE_GMP=OFF \
  -DENABLE_KBIPACK=OFF \
  -DENABLE_METIS=OFF \
  -DENABLE_MPEG_ENCODE=OFF \
  -DENABLE_ONELAB_METAMODEL=OFF \
  -DENABLE_PRO=OFF \
  -DENABLE_DOMHEX=OFF \
  -DENABLE_HXT=OFF \
  -DENABLE_CGNS=OFF \
  -DENABLE_MATHEX=OFF \
  -DENABLE_MED=OFF \
  -DENABLE_MMG=OFF \
  -DENABLE_OCC=ON \
  -DENABLE_OCC_CAF=OFF \
  -DENABLE_QUADTRI=OFF \
  -DENABLE_QUADMESHINGTOOLS=OFF \
  -DENABLE_WINSLOWUNTANGLER=OFF \
  -DBUILD_TESTING=OFF \
  -DENABLE_WRAP_PYTHON=ON \
  -DGMSHPY_INSTALL_DIRECTORY=${_installPrefix}/tools/gmshpy \
  "
  
#-------------------------------------------------------------------------------
# moab
#-------------------------------------------------------------------------------
git_cmake_build \
  "moab" \
  "https://bitbucket.org/fathomteam/moab.git" \
  "5.5.1" \
  "\
  -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
  -DENABLE_CGM=OFF \
  -DENABLE_CGNS=ON \
  -DCMAKE_CXX_FLAGS=-I${_installPrefix}/include \
  -DCMAKE_EXE_LINKER_FLAGS=${_installPrefix}/lib/libcgns.so \
  -DCMAKE_SHARED_LINKER_FLAGS=${_installPrefix}/lib/libcgns.so \
  "
  
#-------------------------------------------------------------------------------
# cgal
#-------------------------------------------------------------------------------
git_cmake_build \
  "cgal" \
  "https://github.com/CGAL/cgal" \
  "v5.6.1" \
  "\
  -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
  -DCMAKE_BUILD_TYPE=Release \
  -DMPFR_INCLUDE_DIR=${_installPrefix}/include \
  -DMPFR_LIBRARIES=${_installPrefix}/lib64 \
  "
  
#-------------------------------------------------------------------------------
# muparser
#-------------------------------------------------------------------------------
git_cmake_build \
  "muparser" \
  "https://github.com/beltoforion/muparser" \
  "" \
  "-DCMAKE_INSTALL_PREFIX=${_installPrefix}"

#-------------------------------------------------------------------------------
# json
#-------------------------------------------------------------------------------
git_cmake_build \
  "nlohmann_json" \
  "https://github.com/nlohmann/json" \
  "v3.11.3" \
  "\
   -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
   -DCMAKE_BUILD_TYPE=Release \
   -DJSON_MultipleHeaders=ON \
  "

#-------------------------------------------------------------------------------
# root
#-------------------------------------------------------------------------------
git_cmake_build \
  "root" \
  "https://github.com/root-project/root" \
  "v6-32-00" \
  "\
   -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
   -Dmathmore=ON \
   -DCMAKE_BUILD_TYPE=Release \
   -Dbuiltin_openssl=FALSE \
   -Dbuiltin_xrootd=FALSE \
   -Dxrootd=FALSE \
   -Dssl=FALSE \
   -Dx11=FALSE \
  "

#-------------------------------------------------------------------------------
# paraview
#-------------------------------------------------------------------------------
git_cmake_build \
  "paraview" \
  "https://github.com/Kitware/ParaView.git" \
  "v5.12.1" \
  "\
  -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
  -DPARAVIEW_USE_QTHELP=OFF \
  -DPARAVIEW_USE_PYTHON=ON \
  -DPARAVIEW_ENABLE_EMBEDDED_DOCUMENTATION=OFF \
  " \
  "git submodule update --init --recursive"

exit 0
